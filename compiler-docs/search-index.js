var searchIndex = JSON.parse('{\
"fe":{"doc":"Fe is an emerging smart contract language for the …","i":[[0,"_utils","fe","",null,null],[5,"pretty_curly_print","fe::_utils","Formats any kind of structured text that uses curly …",null,[[["usize",15],["str",15]],["string",3]]],[17,"DEFAULT_OUTPUT_DIR_NAME","fe","",null,null],[17,"VERSION","","",null,null],[4,"CompilationTarget","","",null,null],[13,"Abi","","",0,null],[13,"Ast","","",0,null],[13,"LoweredAst","","",0,null],[13,"Bytecode","","",0,null],[13,"Tokens","","",0,null],[13,"Yul","","",0,null],[11,"variants","","",0,[[]]],[5,"main","","",null,[[]]],[5,"write_compiled_module","","",null,[[["str",15],["bool",15],["compiledmodule",3]],[["string",3],["result",4]]]],[5,"write_output","","",null,[[["path",3],["str",15]],[["string",3],["result",4]]]],[5,"ioerr_to_string","","",null,[[["error",3]],["string",3]]],[5,"verify_nonexistent_or_empty","","",null,[[["path",3]],[["string",3],["result",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"eq","","",0,[[["compilationtarget",4]],["bool",15]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"from_str","","",0,[[["str",15]],["result",4]]]],"p":[[4,"CompilationTarget"]]},\
"fe_analyzer":{"doc":"Fe semantic analysis.","i":[[0,"builtins","fe_analyzer","",null,null],[4,"ValueMethod","fe_analyzer::builtins","",null,null],[13,"Clone","","",0,null],[13,"ToMem","","",0,null],[13,"AbiEncode","","",0,null],[13,"AbiEncodePacked","","",0,null],[4,"GlobalMethod","","",null,null],[13,"Keccak256","","",1,null],[4,"ContractTypeMethod","","",null,null],[13,"Create","","",2,null],[13,"Create2","","",2,null],[4,"Object","","",null,null],[13,"Block","","",3,null],[13,"Chain","","",3,null],[13,"Msg","","",3,null],[13,"Tx","","",3,null],[13,"Self_","","",3,null],[4,"BlockField","","",null,null],[13,"Coinbase","","",4,null],[13,"Difficulty","","",4,null],[13,"Number","","",4,null],[13,"Timestamp","","",4,null],[4,"ChainField","","",null,null],[13,"Id","","",5,null],[4,"MsgField","","",null,null],[13,"Data","","",6,null],[13,"Sender","","",6,null],[13,"Sig","","",6,null],[13,"Value","","",6,null],[4,"TxField","","",null,null],[13,"GasPrice","","",7,null],[13,"Origin","","",7,null],[4,"SelfField","","",null,null],[13,"Address","","",8,null],[0,"context","fe_analyzer","",null,null],[4,"Location","fe_analyzer::context","Indicates where an expression is stored.",null,null],[13,"Storage","","A storage value may not have a nonce known at compile …",9,null],[12,"nonce","fe_analyzer::context::Location","",10,null],[13,"Memory","fe_analyzer::context","",9,null],[13,"Value","","",9,null],[11,"assign_location","","The expected location of a value with the given type when …",9,[[["type",4]],[["semanticerror",3],["result",4]]]],[3,"ContractAttributes","","Contains contextual information relating to a contract …",null,null],[12,"public_functions","","Public functions that have been defined by the user.",11,null],[12,"init_function","","An init function that has been defined by the user.",11,null],[12,"events","","Events that have been defined by the user.",11,null],[12,"list_expressions","","List expressions that the contract uses",11,null],[12,"string_literals","","Static strings that the contract defines",11,null],[12,"structs","","Structs that have been defined by the user",11,null],[12,"external_contracts","","External contracts that may be called from within this …",11,null],[12,"created_contracts","","Names of contracts that have been created inside of this …",11,null],[3,"ExpressionAttributes","","Contains contextual information relating to an expression …",null,null],[12,"typ","","",12,null],[12,"location","","",12,null],[12,"move_location","","",12,null],[11,"new","","",12,[[["location",4],["type",4]]]],[11,"into_cloned","","Adds a move to memory, if it is already in memory.",12,[[],[["semanticerror",3],["result",4]]]],[11,"into_cloned_from_sto","","Adds a move to memory, if it is in storage.",12,[[],[["semanticerror",3],["result",4]]]],[11,"into_loaded","","Adds a move to value, if it is in storage or memory.",12,[[],[["semanticerror",3],["result",4]]]],[11,"into_assignable","","Adds a move (if necessary) to value if it is a base type …",12,[[],[["semanticerror",3],["result",4]]]],[11,"final_location","","The final location of an expression after a possible move.",12,[[],["location",4]]],[4,"CallType","","The type of a function call.",null,null],[13,"BuiltinFunction","","",13,null],[12,"func","fe_analyzer::context::CallType","",14,null],[13,"TypeConstructor","fe_analyzer::context","",13,null],[12,"typ","fe_analyzer::context::CallType","",15,null],[13,"SelfAttribute","fe_analyzer::context","",13,null],[12,"func_name","fe_analyzer::context::CallType","",16,null],[13,"ValueAttribute","fe_analyzer::context","",13,null],[13,"TypeAttribute","","",13,null],[12,"typ","fe_analyzer::context::CallType","",17,null],[12,"func_name","","",17,null],[3,"FunctionAttributes","fe_analyzer::context","Contains contextual information relating to a function …",null,null],[12,"is_public","","",18,null],[12,"name","","",18,null],[12,"params","","",18,null],[12,"return_type","","",18,null],[11,"param_types","","",18,[[],[["vec",3],["fixedsize",4]]]],[11,"param_names","","",18,[[],[["string",3],["vec",3]]]],[3,"ModuleAttributes","","",null,null],[12,"type_defs","","Type definitions in a module.",19,null],[12,"tuples_used","","Tuples that were used inside of a module.",19,null],[3,"Context","","Contains contextual information about a Fe module and can …",null,null],[12,"node_ids","","Node ids in the order they were visited.",20,null],[12,"spans","","The span of a given node id.",20,null],[12,"expressions","","",20,null],[12,"emits","","",20,null],[12,"functions","","",20,null],[12,"declarations","","",20,null],[12,"contracts","","",20,null],[12,"calls","","",20,null],[12,"events","","",20,null],[12,"type_descs","","",20,null],[12,"module","","",20,null],[11,"new_shared","","",20,[[],["shared",6]]],[11,"new","","",20,[[]]],[11,"add_expression","","Attribute contextual information to an expression node.",20,[[["expressionattributes",3],["node",3]]]],[11,"update_expression","","Update the expression attributes.",20,[[["expressionattributes",3],["node",3]]]],[11,"get_expression","","Get information that has been attributed to an expression …",20,[[["into",8],["nodeid",3]],[["expressionattributes",3],["option",4]]]],[11,"add_emit","","Attribute contextual information to an emit statement …",20,[[["eventdef",3],["node",3]]]],[11,"get_emit","","Get information that has been attributed to an emit …",20,[[["into",8],["nodeid",3]],[["eventdef",3],["option",4]]]],[11,"add_function","","Attribute contextual information to a function definition …",20,[[["node",3],["functionattributes",3]]]],[11,"get_function","","Get information that has been attributed to a function …",20,[[["into",8],["nodeid",3]],[["option",4],["functionattributes",3]]]],[11,"add_declaration","","Attribute contextual information to a declaration node.",20,[[["node",3],["fixedsize",4]]]],[11,"get_declaration","","Get information that has been attributed to a declaration …",20,[[["into",8],["nodeid",3]],[["option",4],["fixedsize",4]]]],[11,"add_contract","","Attribute contextual information to a contract definition …",20,[[["contractattributes",3],["node",3]]]],[11,"get_contract","","Get information that has been attributed to a contract …",20,[[["into",8],["nodeid",3]],[["option",4],["contractattributes",3]]]],[11,"add_call","","Attribute contextual information to a call expression …",20,[[["calltype",4],["node",3]]]],[11,"get_call","","Get information that has been attributed to a call …",20,[[["into",8],["nodeid",3]],[["calltype",4],["option",4]]]],[11,"add_event","","Attribute contextual information to an event definition …",20,[[["eventdef",3],["node",3]]]],[11,"get_event","","Get information that has been attributed to an event …",20,[[["into",8],["nodeid",3]],[["eventdef",3],["option",4]]]],[11,"add_type_desc","","Attribute contextual information to a type description …",20,[[["node",3],["type",4]]]],[11,"get_type_desc","","Get information that has been attributed to a type …",20,[[["into",8],["nodeid",3]],[["option",4],["type",4]]]],[11,"set_module","","Attribute contextual information to the module.",20,[[["moduleattributes",3]]]],[11,"get_module","","Get information that has been attributed to the module.",20,[[],[["option",4],["moduleattributes",3]]]],[11,"get_spanned_expressions","","Get the span and attributes of all expressions.",20,[[],["vec",3]]],[11,"get_spanned_emits","","Get the span and attributes of all emits.",20,[[],["vec",3]]],[11,"get_spanned_functions","","Get the span and attributes of all functions.",20,[[],["vec",3]]],[11,"get_spanned_declarations","","Get the span and attributes of all declarations.",20,[[],["vec",3]]],[11,"get_spanned_contracts","","Get the span and attributes of all contracts.",20,[[],["vec",3]]],[11,"get_spanned_calls","","Get the span and attributes of all calls.",20,[[],["vec",3]]],[11,"get_spanned_events","","Get the span and attributes of all events.",20,[[],["vec",3]]],[11,"get_spanned_type_descs","","Get the span and attributes of all type descs.",20,[[],["vec",3]]],[0,"errors","fe_analyzer","Semantic errors.",null,null],[4,"ErrorKind","fe_analyzer::errors","Errors for things that may arise in a valid Fe AST.",null,null],[13,"AlreadyDefined","","",21,null],[13,"BreakWithoutLoop","","",21,null],[13,"CannotMove","","",21,null],[13,"CircularDependency","","",21,null],[13,"ContinueWithoutLoop","","",21,null],[13,"MapTypeError","","",21,null],[13,"KeyWordArgsRequired","","",21,null],[13,"MissingEventDefinition","","",21,null],[13,"MissingReturn","","",21,null],[13,"MoreThanThreeIndexedParams","","",21,null],[13,"NotCallable","","",21,null],[13,"NotSubscriptable","","",21,null],[13,"NumericCapacityMismatch","","",21,null],[13,"NumericLiteralExpected","","",21,null],[13,"SignedExponentNotAllowed","","",21,null],[13,"StringCapacityMismatch","","",21,null],[13,"TypeError","","",21,null],[13,"UndefinedValue","","",21,null],[13,"UnexpectedReturn","","",21,null],[13,"WrongNumberOfParams","","",21,null],[3,"SemanticError","","",null,null],[12,"kind","","",22,null],[12,"context","","A sequence of nested spans containing the error\'s origin …",22,null],[11,"break_without_loop","","Create a new error with kind <code>BreakWithoutLoop</code>",22,[[]]],[11,"circular_dependency","","Create a new error with kind <code>CircularDependency</code>",22,[[]]],[11,"continue_without_loop","","Create a new error with kind <code>ContinueWithoutLoop</code>",22,[[]]],[11,"kw_args_required","","Create a new error with kind <code>KeyWordArgsRequired</code>",22,[[]]],[11,"missing_event_definition","","Create a new error with kind <code>MissingEventDefinition</code>",22,[[]]],[11,"missing_return","","Create a new error with kind <code>MissingReturn</code>",22,[[]]],[11,"not_subscriptable","","Create a new error with kind <code>NotSubscriptable</code>",22,[[]]],[11,"numeric_capacity_mismatch","","Create a new error with kind <code>NumericCapacityMismatch</code>",22,[[]]],[11,"signed_exponent_not_allowed","","Create a new error with kind <code>SignedExponentNotAllowed</code>",22,[[]]],[11,"string_capacity_mismatch","","Create a new error with kind <code>NumericCapacityMismatch</code>",22,[[]]],[11,"undefined_value","","Create a new error with kind <code>UndefinedValue</code>",22,[[]]],[11,"unexpected_return","","Create a new error with kind <code>UnexpectedReturn</code>",22,[[]]],[11,"type_error","","Create a new error with kind <code>TypeError</code>",22,[[]]],[11,"cannot_move","","Create a new error with kind <code>CannotMove</code>",22,[[]]],[11,"already_defined","","Create a new error with kind <code>AlreadyDefined</code>",22,[[]]],[11,"not_callable","","Create a new error with kind <code>NotCallable</code>",22,[[]]],[11,"numeric_literal_expected","","Create a new error with kind <code>NumericLiteralExpected</code>",22,[[]]],[11,"more_than_three_indexed_params","","Create a new error with kind <code>MoreThanThreeIndexedParams</code>",22,[[]]],[11,"wrong_number_of_params","","Create a new error with kind <code>WrongNumberOfParams</code>",22,[[]]],[11,"with_context","","Maps the error to a new error that contains the given …",22,[[["span",3]]]],[11,"format_user","","Formats the error using the source code.",22,[[["str",15]],["string",3]]],[0,"namespace","fe_analyzer","",null,null],[0,"events","fe_analyzer::namespace","",null,null],[3,"EventDef","fe_analyzer::namespace::events","",null,null],[12,"name","","",23,null],[12,"topic","","",23,null],[12,"fields","","",23,null],[12,"indexed_fields","","",23,null],[11,"new","","",23,[[["usize",15],["vec",3],["vec",3],["str",15]]]],[11,"indexed_field_types_with_index","","The event\'s indexed fields.",23,[[],["vec",3]]],[11,"non_indexed_field_types_with_index","","The event\'s non-indexed fields.",23,[[],["vec",3]]],[11,"non_indexed_field_types","","The event\'s non-indexed field types.",23,[[],[["vec",3],["fixedsize",4]]]],[11,"all_field_types","","The event\'s field types.",23,[[],[["vec",3],["fixedsize",4]]]],[0,"scopes","fe_analyzer::namespace","",null,null],[6,"Shared","fe_analyzer::namespace::scopes","",null,null],[3,"ContractFunctionDef","","",null,null],[12,"is_public","","",24,null],[12,"name","","",24,null],[12,"params","","",24,null],[12,"return_type","","",24,null],[12,"scope","","",24,null],[3,"ContractFieldDef","","",null,null],[12,"nonce","","",25,null],[12,"typ","","",25,null],[3,"ModuleScope","","",null,null],[12,"type_defs","","Type definitions in a module.",26,null],[12,"tuples_used","","Tuples that were used inside of a module.",26,null],[3,"ContractScope","","",null,null],[12,"name","","",27,null],[12,"parent","","",27,null],[12,"interface","","",27,null],[12,"event_defs","","",27,null],[12,"field_defs","","",27,null],[12,"function_defs","","",27,null],[12,"list_expressions","","",27,null],[12,"string_defs","","",27,null],[12,"created_contracts","","",27,null],[3,"BlockScope","","",null,null],[12,"name","","",28,null],[12,"parent","","",28,null],[12,"variable_defs","","",28,null],[12,"typ","","",28,null],[4,"Scope","","",null,null],[13,"Module","","",29,null],[13,"Contract","","",29,null],[13,"Block","","",29,null],[4,"BlockScopeParent","","",null,null],[13,"Contract","","",30,null],[13,"Block","","",30,null],[4,"BlockScopeType","","",null,null],[13,"Function","","",31,null],[13,"IfElse","","",31,null],[13,"Loop","","",31,null],[11,"module_scope","","",29,[[],[["shared",6],["modulescope",3]]]],[11,"new","","",26,[[],["shared",6]]],[11,"add_type_def","","Add a type definiton to the scope",26,[[["type",4],["str",15]],[["result",4],["semanticerror",3]]]],[11,"get_type_defs","","Filter module scope for type definitions that match the …",26,[[["fnmut",8]],["vec",3]]],[11,"get_type_def","","Gets a type definition by name.",26,[[["str",15]],[["option",4],["type",4]]]],[11,"new","","",27,[[["modulescope",3],["shared",6],["str",15]],["shared",6]]],[11,"module_scope","","Return the module scope that the contract scope inherits …",27,[[],[["shared",6],["modulescope",3]]]],[11,"get_module_type_defs","","Filter module scope for type definitions that match the …",27,[[["fnmut",8]],["vec",3]]],[11,"event_def","","Lookup contract event definition by its name.",27,[[["str",15]],[["eventdef",3],["option",4]]]],[11,"field_def","","Lookup contract field definition by its name.",27,[[["str",15]],[["option",4],["contractfielddef",3]]]],[11,"function_def","","Lookup contract function definition by its name.",27,[[["str",15]],[["contractfunctiondef",3],["option",4]]]],[11,"add_field","","Add a contract field definition to the scope.",27,[[["type",4],["str",15]],[["result",4],["semanticerror",3]]]],[11,"add_function","","Add a function definition to the scope.",27,[[["blockscope",3],["vec",3],["fixedsize",4],["bool",15],["shared",6],["str",15]],[["result",4],["semanticerror",3],["contractfunctiondef",3]]]],[11,"add_event","","Add an event definition to the scope.",27,[[["eventdef",3],["str",15]],[["result",4],["semanticerror",3]]]],[11,"add_string","","Add a static string definition to the scope.",27,[[["str",15]],[["result",4],["semanticerror",3]]]],[11,"add_created_contract","","Add the name of another contract that has been created …",27,[[["str",15]]]],[11,"add_used_list_expression","","Add the array type of a list expression that was used …",27,[[["array",3]]]],[11,"new","","",28,[[["blockscopeparent",4],["blockscopetype",4],["str",15]],["shared",6]]],[11,"from_contract_scope","","Create a block scope from a contract scope.",28,[[["contractscope",3],["shared",6],["str",15]],["shared",6]]],[11,"from_block_scope","","Create a block scope from another block scope.",28,[[["blockscope",3],["blockscopetype",4],["shared",6]],["shared",6]]],[11,"contract_scope","","Return the contract scope that the block scope inherits …",28,[[],[["shared",6],["contractscope",3]]]],[11,"module_scope","","Return the module scope that the block scope inherits from",28,[[],[["shared",6],["modulescope",3]]]],[11,"function_scope","","Return the block scope that is associated with the …",28,[[],[["blockscope",3],["shared",6]]]],[11,"contract_event_def","","Lookup an event definition on the inherited contract scope",28,[[["str",15]],[["eventdef",3],["option",4]]]],[11,"contract_field_def","","Lookup a field definition on the inherited contract scope",28,[[["str",15]],[["option",4],["contractfielddef",3]]]],[11,"contract_function_def","","Lookup a function definition on the inherited contract …",28,[[["str",15]],[["contractfunctiondef",3],["option",4]]]],[11,"current_function_def","","Lookup the function definition for the current block …",28,[[],[["contractfunctiondef",3],["option",4]]]],[11,"get_variable_def","","Lookup a definition in current or inherited block scope",28,[[["str",15]],[["option",4],["fixedsize",4]]]],[11,"add_var","","Add a variable to the block scope.",28,[[["fixedsize",4],["str",15]],[["result",4],["semanticerror",3]]]],[11,"inherits_type","","Return true if the scope or any of its parents is of the …",28,[[["blockscopetype",4]],["bool",15]]],[11,"get_module_type_defs","","Filter module scope for type definitions that match the …",28,[[["fnmut",8]],["vec",3]]],[11,"get_module_type_def","","Gets a type definition by name.",28,[[["str",15]],[["option",4],["type",4]]]],[0,"types","fe_analyzer::namespace","",null,null],[5,"u256_min","fe_analyzer::namespace::types","",null,[[],["bigint",3]]],[5,"u256_max","","",null,[[],["bigint",3]]],[5,"i256_max","","",null,[[],["bigint",3]]],[5,"i256_min","","",null,[[],["bigint",3]]],[8,"FeSized","","The type has a constant size known to the compiler.",null,null],[10,"size","","Constant size of the type.",32,[[],["usize",15]]],[3,"AbiUintSize","","The size of uint element in the ABI encoding.",null,null],[12,"data_size","","",33,null],[12,"padded_size","","",33,null],[4,"AbiArraySize","","The size of an array.",null,null],[13,"Static","","",34,null],[12,"size","fe_analyzer::namespace::types::AbiArraySize","",35,null],[13,"Dynamic","fe_analyzer::namespace::types","",34,null],[4,"AbiType","","The type of an element in terms of the ABI spec.",null,null],[13,"Array","","Array elements consist of a dynamically- or …",36,null],[12,"inner","fe_analyzer::namespace::types::AbiType","",37,null],[12,"size","","",37,null],[13,"Tuple","fe_analyzer::namespace::types","",36,null],[12,"elems","fe_analyzer::namespace::types::AbiType","",38,null],[13,"Uint","fe_analyzer::namespace::types","All elements are encoded as a uint or set of uints.",36,null],[12,"size","fe_analyzer::namespace::types::AbiType","",39,null],[4,"AbiDecodeLocation","fe_analyzer::namespace::types","Data can be decoded from memory or calldata.",null,null],[13,"Calldata","","",40,null],[13,"Memory","","",40,null],[3,"AbiComponent","","Single component of a tuple.",null,null],[12,"name","","",41,null],[12,"typ","","",41,null],[12,"components","","The subcomponents of the component.",41,null],[8,"AbiEncoding","","Information relevant to ABI encoding.",null,null],[10,"abi_json_name","","Name of the type as it appears in the Json ABI.",42,[[],["string",3]]],[10,"abi_selector_name","","Name of the type as it appears in the selector preimage.",42,[[],["string",3]]],[10,"abi_components","","The components of an ABI tuple.",42,[[],[["vec",3],["abicomponent",3]]]],[10,"abi_type","","The ABI type of a Fe type.",42,[[],["abitype",4]]],[8,"SafeNames","","Names that can be used to build identifiers without …",null,null],[10,"lower_snake","","Name in the lower snake format (e.g. lower_snake_case).",43,[[],["string",3]]],[4,"Type","","",null,null],[13,"Base","","",44,null],[13,"Array","","",44,null],[13,"Map","","",44,null],[13,"Tuple","","",44,null],[13,"String","","",44,null],[13,"Contract","","",44,null],[13,"Struct","","",44,null],[13,"Unit","","",44,null],[4,"FixedSize","","",null,null],[13,"Base","","",45,null],[13,"Array","","",45,null],[13,"Tuple","","",45,null],[13,"String","","",45,null],[13,"Contract","","",45,null],[13,"Struct","","",45,null],[13,"Unit","","",45,null],[4,"Base","","",null,null],[13,"Numeric","","",46,null],[13,"Bool","","",46,null],[13,"Byte","","",46,null],[13,"Address","","",46,null],[4,"Integer","","",null,null],[13,"U256","","",47,null],[13,"U128","","",47,null],[13,"U64","","",47,null],[13,"U32","","",47,null],[13,"U16","","",47,null],[13,"U8","","",47,null],[13,"I256","","",47,null],[13,"I128","","",47,null],[13,"I64","","",47,null],[13,"I32","","",47,null],[13,"I16","","",47,null],[13,"I8","","",47,null],[17,"U256","","",null,null],[3,"Array","","",null,null],[12,"size","","",48,null],[12,"inner","","",48,null],[3,"Map","","",null,null],[12,"key","","",49,null],[12,"value","","",49,null],[3,"Tuple","","",null,null],[12,"items","","",50,null],[3,"Struct","","",null,null],[12,"name","","",51,null],[3,"FeString","","",null,null],[12,"max_size","","",52,null],[3,"Contract","","",null,null],[12,"name","","",53,null],[12,"functions","","",53,null],[11,"new","","",51,[[["str",15]],["struct",3]]],[11,"is_empty","","Return <code>true</code> if the struct does not have any fields, …",51,[[],["bool",15]]],[11,"add_field","","Add a field to the struct",51,[[["fixedsize",4],["str",15]],[["result",4],["semanticerror",3]]]],[11,"get_field_type","","Return the type of the given field name",51,[[["str",15]],[["option",4],["fixedsize",4]]]],[11,"get_field_index","","Return the index of the given field name",51,[[["str",15]],[["usize",15],["option",4]]]],[11,"get_field_types","","Return a vector of field types",51,[[],[["vec",3],["fixedsize",4]]]],[11,"get_field_names","","Return a vector of field names",51,[[],[["string",3],["vec",3]]]],[11,"get_num_fields","","",51,[[],["usize",15]]],[11,"is_signed","","Returns <code>true</code> if the integer is signed, otherwise <code>false</code>",47,[[],["bool",15]]],[11,"can_hold","","Returns <code>true</code> if the integer is at least the same size (or …",47,[[["integer",4]],["bool",15]]],[11,"fits","","Returns <code>true</code> if <code>num</code> represents a number that fits the type",47,[[["bigint",3]],["bool",15]]],[11,"is_signed_integer","","",44,[[],["bool",15]]],[11,"is_unit","","Returns true if the type is <code>()</code>.",45,[[],["bool",15]]],[11,"bool","","Creates an instance of bool.",45,[[]]],[5,"type_desc_fixed_size","","",null,[[["typedesc",4],["btreemap",3]],[["result",4],["fixedsize",4],["semanticerror",3]]]],[5,"type_desc_base","","",null,[[["typedesc",4],["btreemap",3]],[["result",4],["base",4],["semanticerror",3]]]],[5,"type_desc","","",null,[[["typedesc",4],["btreemap",3]],[["semanticerror",3],["result",4],["type",4]]]],[5,"analyze","fe_analyzer","Performs semantic analysis of the source program and …",null,[[["module",3]],[["semanticerror",3],["context",3],["result",4]]]],[11,"from","fe_analyzer::builtins","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","fe_analyzer::context","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","fe_analyzer::errors","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","fe_analyzer::namespace::events","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","fe_analyzer::namespace::scopes","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","fe_analyzer::namespace::types","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"size","","",45,[[],["usize",15]]],[11,"size","","",47,[[],["usize",15]]],[11,"size","","",46,[[],["usize",15]]],[11,"size","","",48,[[],["usize",15]]],[11,"size","","",50,[[],["usize",15]]],[11,"size","","",51,[[],["usize",15]]],[11,"size","","",52,[[],["usize",15]]],[11,"size","","",53,[[],["usize",15]]],[11,"abi_json_name","","",45,[[],["string",3]]],[11,"abi_selector_name","","",45,[[],["string",3]]],[11,"abi_components","","",45,[[],[["vec",3],["abicomponent",3]]]],[11,"abi_type","","",45,[[],["abitype",4]]],[11,"abi_json_name","","",46,[[],["string",3]]],[11,"abi_selector_name","","",46,[[],["string",3]]],[11,"abi_components","","",46,[[],[["vec",3],["abicomponent",3]]]],[11,"abi_type","","",46,[[],["abitype",4]]],[11,"abi_json_name","","",48,[[],["string",3]]],[11,"abi_selector_name","","",48,[[],["string",3]]],[11,"abi_components","","",48,[[],[["vec",3],["abicomponent",3]]]],[11,"abi_type","","",48,[[],["abitype",4]]],[11,"abi_json_name","","",51,[[],["string",3]]],[11,"abi_selector_name","","",51,[[],["string",3]]],[11,"abi_components","","",51,[[],[["vec",3],["abicomponent",3]]]],[11,"abi_type","","",51,[[],["abitype",4]]],[11,"abi_json_name","","",50,[[],["string",3]]],[11,"abi_selector_name","","",50,[[],["string",3]]],[11,"abi_components","","",50,[[],[["vec",3],["abicomponent",3]]]],[11,"abi_type","","",50,[[],["abitype",4]]],[11,"abi_json_name","","",53,[[],["string",3]]],[11,"abi_selector_name","","",53,[[],["string",3]]],[11,"abi_components","","",53,[[],[["vec",3],["abicomponent",3]]]],[11,"abi_type","","",53,[[],["abitype",4]]],[11,"abi_json_name","","",52,[[],["string",3]]],[11,"abi_selector_name","","",52,[[],["string",3]]],[11,"abi_components","","",52,[[],[["vec",3],["abicomponent",3]]]],[11,"abi_type","","",52,[[],["abitype",4]]],[11,"lower_snake","","",45,[[],["string",3]]],[11,"lower_snake","","",46,[[],["string",3]]],[11,"lower_snake","","",48,[[],["string",3]]],[11,"lower_snake","","",51,[[],["string",3]]],[11,"lower_snake","","",50,[[],["string",3]]],[11,"lower_snake","","",53,[[],["string",3]]],[11,"lower_snake","","",52,[[],["string",3]]],[11,"from","fe_analyzer::context","",11,[[["shared",6],["contractscope",3]]]],[11,"from","","",18,[[["contractfunctiondef",3]]]],[11,"from","","",19,[[["shared",6],["modulescope",3]]]],[11,"from","fe_analyzer::namespace::types","",44,[[["fixedsize",4]]]],[11,"from","","",44,[[["base",4]]]],[11,"from","","",45,[[["base",4]]]],[11,"from","","",45,[[["tuple",3]]]],[11,"clone","fe_analyzer::builtins","",1,[[],["globalmethod",4]]],[11,"clone","fe_analyzer::context","",9,[[],["location",4]]],[11,"clone","","",11,[[],["contractattributes",3]]],[11,"clone","","",12,[[],["expressionattributes",3]]],[11,"clone","","",13,[[],["calltype",4]]],[11,"clone","","",18,[[],["functionattributes",3]]],[11,"clone","","",19,[[],["moduleattributes",3]]],[11,"clone","","",20,[[],["context",3]]],[11,"clone","fe_analyzer::namespace::events","",23,[[],["eventdef",3]]],[11,"clone","fe_analyzer::namespace::scopes","",24,[[],["contractfunctiondef",3]]],[11,"clone","","",25,[[],["contractfielddef",3]]],[11,"clone","","",26,[[],["modulescope",3]]],[11,"clone","","",27,[[],["contractscope",3]]],[11,"clone","","",28,[[],["blockscope",3]]],[11,"clone","","",29,[[],["scope",4]]],[11,"clone","","",30,[[],["blockscopeparent",4]]],[11,"clone","","",31,[[],["blockscopetype",4]]],[11,"clone","fe_analyzer::namespace::types","",33,[[],["abiuintsize",3]]],[11,"clone","","",34,[[],["abiarraysize",4]]],[11,"clone","","",36,[[],["abitype",4]]],[11,"clone","","",40,[[],["abidecodelocation",4]]],[11,"clone","","",41,[[],["abicomponent",3]]],[11,"clone","","",44,[[],["type",4]]],[11,"clone","","",45,[[],["fixedsize",4]]],[11,"clone","","",46,[[],["base",4]]],[11,"clone","","",47,[[],["integer",4]]],[11,"clone","","",48,[[],["array",3]]],[11,"clone","","",49,[[],["map",3]]],[11,"clone","","",50,[[],["tuple",3]]],[11,"clone","","",51,[[],["struct",3]]],[11,"clone","","",52,[[],["festring",3]]],[11,"clone","","",53,[[],["contract",3]]],[11,"default","fe_analyzer::context","",20,[[],["context",3]]],[11,"cmp","","",18,[[["functionattributes",3]],["ordering",4]]],[11,"cmp","fe_analyzer::namespace::types","",33,[[["abiuintsize",3]],["ordering",4]]],[11,"cmp","","",34,[[["abiarraysize",4]],["ordering",4]]],[11,"cmp","","",36,[[["abitype",4]],["ordering",4]]],[11,"cmp","","",40,[[["abidecodelocation",4]],["ordering",4]]],[11,"cmp","","",41,[[["abicomponent",3]],["ordering",4]]],[11,"cmp","","",45,[[["fixedsize",4]],["ordering",4]]],[11,"cmp","","",46,[[["base",4]],["ordering",4]]],[11,"cmp","","",47,[[["integer",4]],["ordering",4]]],[11,"cmp","","",48,[[["array",3]],["ordering",4]]],[11,"cmp","","",50,[[["tuple",3]],["ordering",4]]],[11,"cmp","","",51,[[["struct",3]],["ordering",4]]],[11,"cmp","","",52,[[["festring",3]],["ordering",4]]],[11,"cmp","","",53,[[["contract",3]],["ordering",4]]],[11,"eq","fe_analyzer::builtins","",0,[[["valuemethod",4]],["bool",15]]],[11,"eq","","",1,[[["globalmethod",4]],["bool",15]]],[11,"eq","","",2,[[["contracttypemethod",4]],["bool",15]]],[11,"eq","","",3,[[["object",4]],["bool",15]]],[11,"eq","","",4,[[["blockfield",4]],["bool",15]]],[11,"eq","","",5,[[["chainfield",4]],["bool",15]]],[11,"eq","","",6,[[["msgfield",4]],["bool",15]]],[11,"eq","","",7,[[["txfield",4]],["bool",15]]],[11,"eq","","",8,[[["selffield",4]],["bool",15]]],[11,"eq","fe_analyzer::context","",9,[[["location",4]],["bool",15]]],[11,"ne","","",9,[[["location",4]],["bool",15]]],[11,"eq","","",11,[[["contractattributes",3]],["bool",15]]],[11,"ne","","",11,[[["contractattributes",3]],["bool",15]]],[11,"eq","","",12,[[["expressionattributes",3]],["bool",15]]],[11,"ne","","",12,[[["expressionattributes",3]],["bool",15]]],[11,"eq","","",13,[[["calltype",4]],["bool",15]]],[11,"ne","","",13,[[["calltype",4]],["bool",15]]],[11,"eq","","",18,[[["functionattributes",3]],["bool",15]]],[11,"ne","","",18,[[["functionattributes",3]],["bool",15]]],[11,"eq","","",19,[[["moduleattributes",3]],["bool",15]]],[11,"ne","","",19,[[["moduleattributes",3]],["bool",15]]],[11,"eq","fe_analyzer::errors","",21,[[["errorkind",4]],["bool",15]]],[11,"eq","","",22,[[["semanticerror",3]],["bool",15]]],[11,"ne","","",22,[[["semanticerror",3]],["bool",15]]],[11,"eq","fe_analyzer::namespace::events","",23,[[["eventdef",3]],["bool",15]]],[11,"ne","","",23,[[["eventdef",3]],["bool",15]]],[11,"eq","fe_analyzer::namespace::scopes","",24,[[["contractfunctiondef",3]],["bool",15]]],[11,"ne","","",24,[[["contractfunctiondef",3]],["bool",15]]],[11,"eq","","",25,[[["contractfielddef",3]],["bool",15]]],[11,"ne","","",25,[[["contractfielddef",3]],["bool",15]]],[11,"eq","","",26,[[["modulescope",3]],["bool",15]]],[11,"ne","","",26,[[["modulescope",3]],["bool",15]]],[11,"eq","","",27,[[["contractscope",3]],["bool",15]]],[11,"ne","","",27,[[["contractscope",3]],["bool",15]]],[11,"eq","","",28,[[["blockscope",3]],["bool",15]]],[11,"ne","","",28,[[["blockscope",3]],["bool",15]]],[11,"eq","","",29,[[["scope",4]],["bool",15]]],[11,"ne","","",29,[[["scope",4]],["bool",15]]],[11,"eq","","",30,[[["blockscopeparent",4]],["bool",15]]],[11,"ne","","",30,[[["blockscopeparent",4]],["bool",15]]],[11,"eq","","",31,[[["blockscopetype",4]],["bool",15]]],[11,"eq","fe_analyzer::namespace::types","",33,[[["abiuintsize",3]],["bool",15]]],[11,"ne","","",33,[[["abiuintsize",3]],["bool",15]]],[11,"eq","","",34,[[["abiarraysize",4]],["bool",15]]],[11,"ne","","",34,[[["abiarraysize",4]],["bool",15]]],[11,"eq","","",36,[[["abitype",4]],["bool",15]]],[11,"ne","","",36,[[["abitype",4]],["bool",15]]],[11,"eq","","",40,[[["abidecodelocation",4]],["bool",15]]],[11,"eq","","",41,[[["abicomponent",3]],["bool",15]]],[11,"ne","","",41,[[["abicomponent",3]],["bool",15]]],[11,"eq","","",44,[[["type",4]],["bool",15]]],[11,"ne","","",44,[[["type",4]],["bool",15]]],[11,"eq","","",45,[[["fixedsize",4]],["bool",15]]],[11,"ne","","",45,[[["fixedsize",4]],["bool",15]]],[11,"eq","","",46,[[["base",4]],["bool",15]]],[11,"ne","","",46,[[["base",4]],["bool",15]]],[11,"eq","","",47,[[["integer",4]],["bool",15]]],[11,"eq","","",48,[[["array",3]],["bool",15]]],[11,"ne","","",48,[[["array",3]],["bool",15]]],[11,"eq","","",49,[[["map",3]],["bool",15]]],[11,"ne","","",49,[[["map",3]],["bool",15]]],[11,"eq","","",50,[[["tuple",3]],["bool",15]]],[11,"ne","","",50,[[["tuple",3]],["bool",15]]],[11,"eq","","",51,[[["struct",3]],["bool",15]]],[11,"ne","","",51,[[["struct",3]],["bool",15]]],[11,"eq","","",52,[[["festring",3]],["bool",15]]],[11,"ne","","",52,[[["festring",3]],["bool",15]]],[11,"eq","","",53,[[["contract",3]],["bool",15]]],[11,"ne","","",53,[[["contract",3]],["bool",15]]],[11,"partial_cmp","fe_analyzer::context","",18,[[["functionattributes",3]],[["option",4],["ordering",4]]]],[11,"lt","","",18,[[["functionattributes",3]],["bool",15]]],[11,"le","","",18,[[["functionattributes",3]],["bool",15]]],[11,"gt","","",18,[[["functionattributes",3]],["bool",15]]],[11,"ge","","",18,[[["functionattributes",3]],["bool",15]]],[11,"partial_cmp","fe_analyzer::namespace::types","",33,[[["abiuintsize",3]],[["option",4],["ordering",4]]]],[11,"lt","","",33,[[["abiuintsize",3]],["bool",15]]],[11,"le","","",33,[[["abiuintsize",3]],["bool",15]]],[11,"gt","","",33,[[["abiuintsize",3]],["bool",15]]],[11,"ge","","",33,[[["abiuintsize",3]],["bool",15]]],[11,"partial_cmp","","",34,[[["abiarraysize",4]],[["option",4],["ordering",4]]]],[11,"lt","","",34,[[["abiarraysize",4]],["bool",15]]],[11,"le","","",34,[[["abiarraysize",4]],["bool",15]]],[11,"gt","","",34,[[["abiarraysize",4]],["bool",15]]],[11,"ge","","",34,[[["abiarraysize",4]],["bool",15]]],[11,"partial_cmp","","",36,[[["abitype",4]],[["option",4],["ordering",4]]]],[11,"lt","","",36,[[["abitype",4]],["bool",15]]],[11,"le","","",36,[[["abitype",4]],["bool",15]]],[11,"gt","","",36,[[["abitype",4]],["bool",15]]],[11,"ge","","",36,[[["abitype",4]],["bool",15]]],[11,"partial_cmp","","",40,[[["abidecodelocation",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",41,[[["abicomponent",3]],[["option",4],["ordering",4]]]],[11,"lt","","",41,[[["abicomponent",3]],["bool",15]]],[11,"le","","",41,[[["abicomponent",3]],["bool",15]]],[11,"gt","","",41,[[["abicomponent",3]],["bool",15]]],[11,"ge","","",41,[[["abicomponent",3]],["bool",15]]],[11,"partial_cmp","","",45,[[["fixedsize",4]],[["option",4],["ordering",4]]]],[11,"lt","","",45,[[["fixedsize",4]],["bool",15]]],[11,"le","","",45,[[["fixedsize",4]],["bool",15]]],[11,"gt","","",45,[[["fixedsize",4]],["bool",15]]],[11,"ge","","",45,[[["fixedsize",4]],["bool",15]]],[11,"partial_cmp","","",46,[[["base",4]],[["option",4],["ordering",4]]]],[11,"lt","","",46,[[["base",4]],["bool",15]]],[11,"le","","",46,[[["base",4]],["bool",15]]],[11,"gt","","",46,[[["base",4]],["bool",15]]],[11,"ge","","",46,[[["base",4]],["bool",15]]],[11,"partial_cmp","","",47,[[["integer",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",48,[[["array",3]],[["option",4],["ordering",4]]]],[11,"lt","","",48,[[["array",3]],["bool",15]]],[11,"le","","",48,[[["array",3]],["bool",15]]],[11,"gt","","",48,[[["array",3]],["bool",15]]],[11,"ge","","",48,[[["array",3]],["bool",15]]],[11,"partial_cmp","","",50,[[["tuple",3]],[["option",4],["ordering",4]]]],[11,"lt","","",50,[[["tuple",3]],["bool",15]]],[11,"le","","",50,[[["tuple",3]],["bool",15]]],[11,"gt","","",50,[[["tuple",3]],["bool",15]]],[11,"ge","","",50,[[["tuple",3]],["bool",15]]],[11,"partial_cmp","","",51,[[["struct",3]],[["option",4],["ordering",4]]]],[11,"lt","","",51,[[["struct",3]],["bool",15]]],[11,"le","","",51,[[["struct",3]],["bool",15]]],[11,"gt","","",51,[[["struct",3]],["bool",15]]],[11,"ge","","",51,[[["struct",3]],["bool",15]]],[11,"partial_cmp","","",52,[[["festring",3]],[["option",4],["ordering",4]]]],[11,"lt","","",52,[[["festring",3]],["bool",15]]],[11,"le","","",52,[[["festring",3]],["bool",15]]],[11,"gt","","",52,[[["festring",3]],["bool",15]]],[11,"ge","","",52,[[["festring",3]],["bool",15]]],[11,"partial_cmp","","",53,[[["contract",3]],[["option",4],["ordering",4]]]],[11,"lt","","",53,[[["contract",3]],["bool",15]]],[11,"le","","",53,[[["contract",3]],["bool",15]]],[11,"gt","","",53,[[["contract",3]],["bool",15]]],[11,"ge","","",53,[[["contract",3]],["bool",15]]],[11,"to_string","fe_analyzer::builtins","",3,[[],["string",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","fe_analyzer::context","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","fe_analyzer::errors","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","fe_analyzer::namespace::events","",23,[[["formatter",3]],["result",6]]],[11,"fmt","fe_analyzer::namespace::scopes","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","fe_analyzer::namespace::types","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"hash","fe_analyzer::builtins","",1,[[]]],[11,"hash","fe_analyzer::context","",9,[[]]],[11,"hash","","",11,[[]]],[11,"hash","","",12,[[]]],[11,"hash","","",13,[[]]],[11,"hash","","",18,[[]]],[11,"hash","fe_analyzer::namespace::events","",23,[[]]],[11,"hash","fe_analyzer::namespace::types","",44,[[]]],[11,"hash","","",45,[[]]],[11,"hash","","",46,[[]]],[11,"hash","","",47,[[]]],[11,"hash","","",48,[[]]],[11,"hash","","",49,[[]]],[11,"hash","","",50,[[]]],[11,"hash","","",51,[[]]],[11,"hash","","",52,[[]]],[11,"hash","","",53,[[]]],[11,"try_from","","",52,[[["str",15]],["result",4]]],[11,"try_from","","",45,[[["type",4]],[["semanticerror",3],["result",4]]]],[11,"from_str","fe_analyzer::builtins","",0,[[["str",15]],[["result",4],["valuemethod",4]]]],[11,"from_str","","",1,[[["str",15]],[["result",4],["globalmethod",4]]]],[11,"from_str","","",2,[[["str",15]],[["result",4],["contracttypemethod",4]]]],[11,"from_str","","",3,[[["str",15]],[["result",4],["object",4]]]],[11,"from_str","","",4,[[["str",15]],[["result",4],["blockfield",4]]]],[11,"from_str","","",5,[[["str",15]],[["result",4],["chainfield",4]]]],[11,"from_str","","",6,[[["str",15]],[["msgfield",4],["result",4]]]],[11,"from_str","","",7,[[["str",15]],[["txfield",4],["result",4]]]],[11,"from_str","","",8,[[["str",15]],[["selffield",4],["result",4]]]]],"p":[[4,"ValueMethod"],[4,"GlobalMethod"],[4,"ContractTypeMethod"],[4,"Object"],[4,"BlockField"],[4,"ChainField"],[4,"MsgField"],[4,"TxField"],[4,"SelfField"],[4,"Location"],[13,"Storage"],[3,"ContractAttributes"],[3,"ExpressionAttributes"],[4,"CallType"],[13,"BuiltinFunction"],[13,"TypeConstructor"],[13,"SelfAttribute"],[13,"TypeAttribute"],[3,"FunctionAttributes"],[3,"ModuleAttributes"],[3,"Context"],[4,"ErrorKind"],[3,"SemanticError"],[3,"EventDef"],[3,"ContractFunctionDef"],[3,"ContractFieldDef"],[3,"ModuleScope"],[3,"ContractScope"],[3,"BlockScope"],[4,"Scope"],[4,"BlockScopeParent"],[4,"BlockScopeType"],[8,"FeSized"],[3,"AbiUintSize"],[4,"AbiArraySize"],[13,"Static"],[4,"AbiType"],[13,"Array"],[13,"Tuple"],[13,"Uint"],[4,"AbiDecodeLocation"],[3,"AbiComponent"],[8,"AbiEncoding"],[8,"SafeNames"],[4,"Type"],[4,"FixedSize"],[4,"Base"],[4,"Integer"],[3,"Array"],[3,"Map"],[3,"Tuple"],[3,"Struct"],[3,"FeString"],[3,"Contract"]]},\
"fe_common":{"doc":"","i":[[0,"diagnostics","fe_common","",null,null],[3,"CsDiagnostic","fe_common::diagnostics","Represents a diagnostic message that can provide …",null,null],[12,"severity","","The overall severity of the diagnostic",0,null],[12,"code","","An optional code that identifies this diagnostic.",0,null],[12,"message","","The main message associated with this diagnostic.",0,null],[12,"labels","","Source labels that describe the cause of the diagnostic. …",0,null],[12,"notes","","Notes that are associated with the primary cause of the …",0,null],[3,"Label","","A label describing an underlined region of code …",null,null],[12,"style","","The style of the label.",1,null],[12,"file_id","","The file that we are labelling.",1,null],[12,"range","","The range in bytes we are going to include in the final …",1,null],[12,"message","","An optional message to provide some additional …",1,null],[4,"LabelStyle","","",null,null],[13,"Primary","","Labels that describe the primary cause of a diagnostic.",2,null],[13,"Secondary","","Labels that provide additional context for a diagnostic.",2,null],[4,"Severity","","A severity level for diagnostic messages.",null,null],[13,"Bug","","An unexpected bug.",3,null],[13,"Error","","An error.",3,null],[13,"Warning","","A warning.",3,null],[13,"Note","","A note.",3,null],[13,"Help","","A help message.",3,null],[6,"Diagnostic","","",null,null],[5,"print_diagnostics","","Print the given diagnostics to stderr.",null,[[["filestore",3]]]],[5,"diagnostics_string","","Format the given diagnostics as a string.",null,[[["filestore",3]],["string",3]]],[0,"files","fe_common","",null,null],[3,"SourceFile","fe_common::files","",null,null],[3,"SourceFileId","","",null,null],[12,"0","","",4,null],[11,"new","","",5,[[["str",15]]]],[11,"line_index","","",5,[[["usize",15]],["usize",15]]],[11,"line_span","","",5,[[["usize",15]],[["span",3],["option",4]]]],[8,"FileLoader","","",null,null],[10,"load_file","","",6,[[["path",3]],[["result",6],["string",3]]]],[3,"OsFileLoader","","",null,null],[3,"FileStore","","",null,null],[11,"new","","",7,[[]]],[11,"with_loader","","",7,[[["box",3],["fileloader",8]]]],[11,"add_file","","",7,[[["str",15]],["sourcefileid",3]]],[11,"load_file","","",7,[[["str",15]],["result",6]]],[11,"get_file","","",7,[[["sourcefileid",3]],[["option",4],["sourcefile",3]]]],[0,"numeric","fe_common","",null,null],[4,"Radix","fe_common::numeric","A type that represents the radix of a numeric literal.",null,null],[13,"Hexadecimal","","",8,null],[13,"Decimal","","",8,null],[13,"Octal","","",8,null],[13,"Binary","","",8,null],[11,"as_num","","Returns number representation of the radix.",8,[[],["u32",15]]],[3,"Literal","","A helper type to interpret a numeric literal represented …",null,null],[11,"new","","",9,[[["str",15]]]],[11,"parse","","Parse the numeric literal to <code>T</code>.",9,[[],[["result",4],["num",8]]]],[11,"radix","","Returns radix of the numeric literal.",9,[[],["radix",4]]],[0,"utils","fe_common","",null,null],[0,"keccak","fe_common::utils","",null,null],[5,"full","fe_common::utils::keccak","Get the full 32 byte hash of the content.",null,[[],["string",3]]],[5,"partial_right_padded","","Take the first <code>size</code> number of bytes of the hash and pad …",null,[[["usize",15]],["string",3]]],[5,"partial","","Take the first <code>size</code> number of bytes of the hash with no …",null,[[["usize",15]],["string",3]]],[5,"full_as_bytes","","Get the full 32 byte hash of the content as a byte array.",null,[[]]],[0,"ron","fe_common::utils","",null,null],[3,"Diff","fe_common::utils::ron","Wrapper struct for formatting changesets from the …",null,null],[11,"new","","",10,[[["str",15]]]],[5,"to_ron_string_pretty","","Convenience function to serialize objects in RON format …",null,[[],[["string",3],["result",6]]]],[3,"Span","fe_common","An exclusive span of byte offsets in a source file.",null,null],[12,"start","","A byte offset specifying the inclusive start of a span.",11,null],[12,"end","","A byte offset specifying the exclusive end of a span.",11,null],[14,"assert_strings_eq","","Compare the given strings and panic when not equal with a …",null,null],[11,"from","fe_common::diagnostics","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","fe_common::files","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","fe_common::numeric","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","fe_common","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","fe_common::utils::ron","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"fmt","fe_common::diagnostics","",2,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",3,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",3,[[]]],[11,"partial_cmp","","",3,[[["severity",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",2,[[["labelstyle",4]],[["option",4],["ordering",4]]]],[11,"clone","","",0,[[],["diagnostic",3]]],[11,"clone","","",1,[[],["label",3]]],[11,"clone","","",2,[[],["labelstyle",4]]],[11,"clone","","",3,[[],["severity",4]]],[11,"eq","","",0,[[["diagnostic",3]],["bool",15]]],[11,"ne","","",0,[[["diagnostic",3]],["bool",15]]],[11,"eq","","",1,[[["label",3]],["bool",15]]],[11,"ne","","",1,[[["label",3]],["bool",15]]],[11,"eq","","",2,[[["labelstyle",4]],["bool",15]]],[11,"eq","","",3,[[["severity",4]],["bool",15]]],[11,"load_file","fe_common::files","",12,[[["path",3]],[["result",6],["string",3]]]],[11,"clone","","",4,[[],["sourcefileid",3]]],[11,"clone","fe_common::numeric","",8,[[],["radix",4]]],[11,"clone","","",9,[[],["literal",3]]],[11,"clone","fe_common","",11,[[],["span",3]]],[11,"default","fe_common::files","",7,[[]]],[11,"eq","","",4,[[["sourcefileid",3]],["bool",15]]],[11,"ne","","",4,[[["sourcefileid",3]],["bool",15]]],[11,"eq","fe_common::numeric","",8,[[["radix",4]],["bool",15]]],[11,"eq","fe_common","",11,[[["span",3]],["bool",15]]],[11,"ne","","",11,[[["span",3]],["bool",15]]],[11,"fmt","fe_common::files","",4,[[["formatter",3]],["result",6]]],[11,"fmt","fe_common::numeric","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","fe_common","",11,[[["formatter",3]],["result",6]]],[11,"fmt","fe_common::utils::ron","",10,[[["formatter",3]],["result",6]]],[11,"add","fe_common","",11,[[]]],[11,"add","","",11,[[["option",4],["span",3]]]],[11,"add","","",11,[[["option",4]]]],[11,"add_assign","","",11,[[]]],[11,"hash","fe_common::files","",4,[[]]],[11,"hash","fe_common","",11,[[]]],[11,"name","fe_common::files","",7,[[["sourcefileid",3]],[["cserror",4],["result",4]]]],[11,"source","","",7,[[["sourcefileid",3]],[["cserror",4],["result",4]]]],[11,"line_index","","",7,[[["usize",15],["sourcefileid",3]],[["result",4],["usize",15],["cserror",4]]]],[11,"line_range","","",7,[[["usize",15],["sourcefileid",3]],[["cserror",4],["result",4],["range",3]]]],[11,"serialize","fe_common","",11,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"new","fe_common::diagnostics","Create a new diagnostic.",0,[[["severity",4]],["diagnostic",3]]],[11,"bug","","Create a new diagnostic with a severity of <code>Severity::Bug</code>.",0,[[],["diagnostic",3]]],[11,"error","","Create a new diagnostic with a severity of <code>Severity::Error</code>…",0,[[],["diagnostic",3]]],[11,"warning","","Create a new diagnostic with a severity of …",0,[[],["diagnostic",3]]],[11,"note","","Create a new diagnostic with a severity of <code>Severity::Note</code>.",0,[[],["diagnostic",3]]],[11,"help","","Create a new diagnostic with a severity of <code>Severity::Help</code>.",0,[[],["diagnostic",3]]],[11,"with_code","","Set the error code of the diagnostic.",0,[[],["diagnostic",3]]],[11,"with_message","","Set the message of the diagnostic.",0,[[],["diagnostic",3]]],[11,"with_labels","","Add some labels to the diagnostic.",0,[[["vec",3],["label",3],["global",3]],["diagnostic",3]]],[11,"with_notes","","Add some notes to the diagnostic.",0,[[["global",3],["string",3],["vec",3]],["diagnostic",3]]],[11,"new","","Create a new label.",1,[[["labelstyle",4]],["label",3]]],[11,"primary","","Create a new label with a style of <code>LabelStyle::Primary</code>.",1,[[],["label",3]]],[11,"secondary","","Create a new label with a style of <code>LabelStyle::Secondary</code>.",1,[[],["label",3]]],[11,"with_message","","Add a message to the diagnostic.",1,[[],["label",3]]],[11,"new","fe_common","",11,[[["usize",15]]]],[11,"zero","","",11,[[]]],[11,"from_pair","","",11,[[]]]],"p":[[3,"CsDiagnostic"],[3,"Label"],[4,"LabelStyle"],[4,"Severity"],[3,"SourceFileId"],[3,"SourceFile"],[8,"FileLoader"],[3,"FileStore"],[4,"Radix"],[3,"Literal"],[3,"Diff"],[3,"Span"],[3,"OsFileLoader"]]},\
"fe_compiler":{"doc":"Modules for compiling Fe and building ABIs.","i":[[0,"abi","fe_compiler","Fe to ABI builder.",null,null],[0,"utils","fe_compiler::abi","",null,null],[5,"event_topic","fe_compiler::abi::utils","Formats the name and fields and calculates the 32 byte …",null,[[["string",3],["vec",3],["str",15]],["string",3]]],[5,"func_selector","","Formats the name and params and calculates the 4 byte …",null,[[["string",3],["vec",3],["str",15]],["string",3]]],[0,"elements","fe_compiler::abi","Elements used to define contract ABIs.",null,null],[6,"ModuleAbis","fe_compiler::abi::elements","The ABIs for each contract in a Fe module.",null,null],[3,"Contract","","All public interfaces of a Fe contract.",null,null],[12,"events","","All events defined in a contract.",0,null],[12,"functions","","All public functions defined in a contract.",0,null],[11,"new","","",0,[[]]],[11,"json","","Serialize the contract into a valid JSON ABI.",0,[[["bool",15]],[["compileerror",3],["result",4],["string",3]]]],[3,"Event","","An event interface.",null,null],[12,"name","","The event\'s name.",1,null],[12,"typ","","The type of an event (Always \\\"event\\\").",1,null],[12,"fields","","All event fields.",1,null],[12,"anonymous","","True if the event was declared as anonymous.",1,null],[3,"EventField","","A single event field.",null,null],[12,"name","","The event field\'s name.",2,null],[12,"typ","","The type of an event (e.g. u256, address, bytes100,...)",2,null],[12,"indexed","","True if the field is part of the log’s topics, false if …",2,null],[12,"components","","Components of a tuple. This field is excluded if there …",2,null],[3,"Function","","A function interface.",null,null],[12,"name","","The function\'s name.",3,null],[12,"typ","","The type of a function (Function, Constructor, Receive, …",3,null],[12,"inputs","","All function inputs.",3,null],[12,"outputs","","All function outputs.",3,null],[3,"Component","","Component of an ABI tuple.",null,null],[3,"FuncInput","","A single function input.",null,null],[12,"name","","The input\'s name.",4,null],[12,"typ","","The input\'s type.",4,null],[12,"components","","Components of a tuple. This field is excluded if there …",4,null],[3,"FuncOutput","","A single function output.",null,null],[12,"name","","The output\'s name.",5,null],[12,"typ","","The output\'s type.",5,null],[12,"components","","Components of a tuple. This field is excluded if there …",5,null],[4,"FuncType","","The type of a public function.",null,null],[13,"Function","","",6,null],[13,"Constructor","","",6,null],[13,"Receive","","",6,null],[13,"Fallback","","",6,null],[4,"StateMutability","","The mutability of a public function.",null,null],[13,"Pure","","",7,null],[13,"View","","",7,null],[13,"Nonpayable","","",7,null],[13,"Payable","","",7,null],[5,"build","fe_compiler::abi","Builds ABIs for each contract in the module.",null,[[["femoduleast",6],["context",3]],[["namedabis",6],["compileerror",3],["result",4]]]],[0,"errors","fe_compiler","Errors returned by the compilers and ABI builder.",null,null],[5,"install_compiler_panic_hook","fe_compiler::errors","",null,[[]]],[4,"ErrorKind","","Errors can either be an object or static reference.",null,null],[13,"Str","","",8,null],[13,"Analyzer","","",8,null],[13,"Parser","","",8,null],[3,"CompileError","","List of errors encountered during compilation.",null,null],[12,"errors","","",9,null],[11,"new","","",9,[[]]],[11,"static_str","","Create a single error with a static string.",9,[[["str",15]]]],[11,"str","","Create a single error with a string object.",9,[[["str",15]]]],[11,"analyzer","","",9,[[["semanticerror",3]]]],[0,"lowering","fe_compiler","Fe Lowering.",null,null],[5,"lower","fe_compiler::lowering","Lowers the Fe source AST to a Fe HIR AST.",null,[[["femoduleast",6],["context",3]],["femoduleast",6]]],[0,"types","fe_compiler","",null,null],[6,"ContractName","fe_compiler::types","The name of a Fe contract.",null,null],[6,"FeModuleAst","","The AST of a Fe module.",null,null],[6,"JsonAbi","","The ABI of a contract as a string.",null,null],[6,"FeSrc","","The source of a Fe module as a static string.",null,null],[6,"YulIr","","The intermediate representation of a contract as a string …",null,null],[6,"Bytecode","","The bytecode of a contract as string object.",null,null],[6,"NamedAbis","","A mapping of contract names and their ABIs.",null,null],[6,"NamedYulContracts","","A mapping of contract names and their Yul IR.",null,null],[6,"NamedBytecodeContracts","","A mapping of contract names and their bytecode.",null,null],[3,"CompiledContract","","The artifacts of a compiled contract.",null,null],[12,"json_abi","","",10,null],[12,"yul","","",10,null],[6,"NamedContracts","","A mapping of contract names and their artifacts.",null,null],[3,"CompiledModule","","The artifacts of a compiled module.",null,null],[12,"src_ast","","",11,null],[12,"lowered_ast","","",11,null],[12,"contracts","","",11,null],[0,"yul","fe_compiler","Fe to Yul compiler.",null,null],[0,"constants","fe_compiler::yul","",null,null],[5,"numeric_min_max","fe_compiler::yul::constants","Return a hashmap containing min/max YUL literals for each …",null,[[],[["hashmap",3],["integer",4]]]],[0,"runtime","fe_compiler::yul","",null,null],[0,"functions","fe_compiler::yul::runtime","",null,null],[0,"abi","fe_compiler::yul::runtime::functions","",null,null],[5,"all","fe_compiler::yul::runtime::functions::abi","Return all abi runtime functions",null,[[],[["vec",3],["statement",4]]]],[5,"batch_encode","","Creates a batch of encoding function for the given type …",null,[[["vec",3],["vec",3]],[["vec",3],["statement",4]]]],[5,"batch_decode","","Creates a batch of decoding function for the given types …",null,[[["vec",3]],[["vec",3],["statement",4]]]],[5,"unpack","","Adds padding to array elements following the ABI standard.",null,[[],["statement",4]]],[5,"pack","","Removes padding from array elements so that they may be …",null,[[["abidecodelocation",4]],["statement",4]]],[0,"contracts","fe_compiler::yul::runtime::functions","",null,null],[5,"all","fe_compiler::yul::runtime::functions::contracts","Return all contacts runtime functions",null,[[],[["vec",3],["statement",4]]]],[5,"calls","","Builds a set of functions used to make calls to the given …",null,[[["contract",3]],[["vec",3],["statement",4]]]],[5,"create2","","Function that executes the <code>create2</code> operation.",null,[[],["statement",4]]],[5,"create","","Function that executes the <code>create</code> operation.",null,[[],["statement",4]]],[0,"data","fe_compiler::yul::runtime::functions","",null,null],[5,"all","fe_compiler::yul::runtime::functions::data","Return all data runtime functions",null,[[],[["vec",3],["statement",4]]]],[5,"avail","","Returns the highest available pointer.",null,[[],["statement",4]]],[5,"alloc","","Allocate a given number of bytes.",null,[[],["statement",4]]],[5,"free","","Set the highest available pointer.",null,[[],["statement",4]]],[5,"set_zero","","Set the given segment of the value (defined in bits) to …",null,[[],["statement",4]]],[5,"ceil32","","Rounds a 256 bit value up to the nearest multiple of 32.",null,[[],["statement",4]]],[5,"ccopym","","Copy calldata to a newly allocated segment of memory.",null,[[],["statement",4]]],[5,"mcopys","","Copy memory to a given segment of storage.",null,[[],["statement",4]]],[5,"scopym","","Copy storage to a newly allocated segment of memory.",null,[[],["statement",4]]],[5,"scopys","","Copies a segment of storage to another segment of storage.",null,[[],["statement",4]]],[5,"mcopym","","Copies a segment of memory to another segment of memory.",null,[[],["statement",4]]],[5,"mloadn","","Read a value of n bytes from memory at the given address.",null,[[],["statement",4]]],[5,"sloadn","","Read a value of n bytes at the given word address and …",null,[[],["statement",4]]],[5,"cloadn","","Read a value of n bytes from calldata at the given …",null,[[],["statement",4]]],[5,"mstoren","","Stores a value in memory, only modifying the given size …",null,[[],["statement",4]]],[5,"sstoren","","Stores a value in storage, only modifying the given size …",null,[[],["statement",4]]],[5,"bytes_mcopys","","Copy memory to a given segment of storage.",null,[[],["statement",4]]],[5,"bytes_scopym","","Copy storage to a newly allocated segment of memory.",null,[[],["statement",4]]],[5,"bytes_scopys","","Copies a segment of storage to another segment of storage.",null,[[],["statement",4]]],[5,"bytes_sloadn","","Read a value of n bytes at the given byte address.",null,[[],["statement",4]]],[5,"bytes_sstoren","","Stores a value in storage at the given address, only …",null,[[],["statement",4]]],[5,"alloc_mstoren","","Stores a value in a newly allocated memory segment.",null,[[],["statement",4]]],[5,"map_value_ptr","","Derives the byte address of a value corresponding to a …",null,[[],["statement",4]]],[5,"ternary","","Evaluates the ternary expression and returns the result.",null,[[],["statement",4]]],[5,"load_data_string","","Load a static string from data into a newly allocated …",null,[[],["statement",4]]],[5,"revert_with_reason_string","","Revert with encoded reason string",null,[[],["statement",4]]],[0,"math","fe_compiler::yul::runtime::functions","",null,null],[5,"checked_add_fns","fe_compiler::yul::runtime::functions::math","Return a vector of runtime functions for additions with …",null,[[],[["vec",3],["statement",4]]]],[5,"checked_div_fns","","Return a vector of runtime functions for divisions with …",null,[[],[["vec",3],["statement",4]]]],[5,"checked_exp_fns","","Return a vector of runtime functions for exponentiation …",null,[[],[["vec",3],["statement",4]]]],[5,"checked_mod_fns","","Return a vector of runtime functions for checked modulo …",null,[[],[["vec",3],["statement",4]]]],[5,"checked_mul_fns","","Return a vector of runtime functions for multiplications …",null,[[],[["vec",3],["statement",4]]]],[5,"checked_sub_fns","","Return a vector of runtime functions for subtraction with …",null,[[],[["vec",3],["statement",4]]]],[5,"all","","",null,[[],[["vec",3],["statement",4]]]],[0,"structs","fe_compiler::yul::runtime::functions","",null,null],[5,"generate_new_fn","fe_compiler::yul::runtime::functions::structs","Generate a YUL function that can be used to create an …",null,[[["struct",3]],["statement",4]]],[5,"generate_get_fn","","Generate a YUL function that can be used to read a …",null,[[["struct",3],["str",15]],["statement",4]]],[5,"struct_apis","","Builds a set of functions used to interact with structs …",null,[[["struct",3]],[["vec",3],["statement",4]]]],[5,"std","fe_compiler::yul::runtime::functions","Returns all functions that should be available during …",null,[[],[["vec",3],["statement",4]]]],[5,"build","fe_compiler::yul::runtime","Builds the set of function statements that are needed …",null,[[["node",3],["context",3]],[["vec",3],["statement",4]]]],[5,"build_with_abi_dispatcher","","Builds the set of function statements that are needed …",null,[[["node",3],["context",3]],[["vec",3],["statement",4]]]],[5,"compile","fe_compiler::yul","Compiles Fe source code to Yul.",null,[[["femoduleast",6],["context",3]],["namedyulcontracts",6]]],[5,"compile","fe_compiler","Compiles the given Fe source code to all targets.",null,[[["bool",15],["sourcefileid",3],["str",15]],[["compiledmodule",3],["compileerror",3],["result",4]]]],[11,"from","fe_compiler::abi::elements","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","fe_compiler::errors","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","fe_compiler::types","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","fe_compiler::abi::elements","",12,[[["abicomponent",3]]]],[11,"from","","",3,[[["functionattributes",3]]]],[11,"from","fe_compiler::errors","",9,[[["error",3]]]],[11,"from","","",9,[[["error",4]]]],[11,"from","","",9,[[["semanticerror",3]]]],[11,"clone","fe_compiler::abi::elements","",0,[[],["contract",3]]],[11,"clone","","",1,[[],["event",3]]],[11,"clone","","",2,[[],["eventfield",3]]],[11,"clone","","",3,[[],["function",3]]],[11,"clone","","",12,[[],["component",3]]],[11,"clone","","",4,[[],["funcinput",3]]],[11,"clone","","",5,[[],["funcoutput",3]]],[11,"clone","","",6,[[],["functype",4]]],[11,"clone","","",7,[[],["statemutability",4]]],[11,"default","","",0,[[]]],[11,"default","fe_compiler::errors","",9,[[]]],[11,"eq","fe_compiler::abi::elements","",0,[[["contract",3]],["bool",15]]],[11,"ne","","",0,[[["contract",3]],["bool",15]]],[11,"eq","","",1,[[["event",3]],["bool",15]]],[11,"ne","","",1,[[["event",3]],["bool",15]]],[11,"eq","","",2,[[["eventfield",3]],["bool",15]]],[11,"ne","","",2,[[["eventfield",3]],["bool",15]]],[11,"eq","","",3,[[["function",3]],["bool",15]]],[11,"ne","","",3,[[["function",3]],["bool",15]]],[11,"eq","","",12,[[["component",3]],["bool",15]]],[11,"ne","","",12,[[["component",3]],["bool",15]]],[11,"eq","","",4,[[["funcinput",3]],["bool",15]]],[11,"ne","","",4,[[["funcinput",3]],["bool",15]]],[11,"eq","","",5,[[["funcoutput",3]],["bool",15]]],[11,"ne","","",5,[[["funcoutput",3]],["bool",15]]],[11,"eq","","",6,[[["functype",4]],["bool",15]]],[11,"eq","","",7,[[["statemutability",4]],["bool",15]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","fe_compiler::errors","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"serialize","fe_compiler::abi::elements","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]]],"p":[[3,"Contract"],[3,"Event"],[3,"EventField"],[3,"Function"],[3,"FuncInput"],[3,"FuncOutput"],[4,"FuncType"],[4,"StateMutability"],[4,"ErrorKind"],[3,"CompileError"],[3,"CompiledContract"],[3,"CompiledModule"],[3,"Component"]]},\
"fe_parser":{"doc":"","i":[[0,"ast","fe_parser","",null,null],[3,"Module","fe_parser::ast","",null,null],[12,"body","","",0,null],[4,"ModuleStmt","","",null,null],[13,"TypeDef","","",1,null],[12,"name","fe_parser::ast::ModuleStmt","",2,null],[12,"typ","","",2,null],[13,"SimpleImport","fe_parser::ast","",1,null],[12,"names","fe_parser::ast::ModuleStmt","",3,null],[13,"FromImport","fe_parser::ast","",1,null],[12,"path","fe_parser::ast::ModuleStmt","",4,null],[12,"names","","",4,null],[13,"ContractDef","fe_parser::ast","",1,null],[12,"name","fe_parser::ast::ModuleStmt","",5,null],[12,"fields","","",5,null],[12,"body","","",5,null],[13,"StructDef","fe_parser::ast","",1,null],[12,"name","fe_parser::ast::ModuleStmt","",6,null],[12,"fields","","",6,null],[4,"TypeDesc","fe_parser::ast","",null,null],[13,"Unit","","",7,null],[13,"Base","","",7,null],[12,"base","fe_parser::ast::TypeDesc","",8,null],[13,"Array","fe_parser::ast","",7,null],[12,"typ","fe_parser::ast::TypeDesc","",9,null],[12,"dimension","","",9,null],[13,"Tuple","fe_parser::ast","",7,null],[12,"items","fe_parser::ast::TypeDesc","",10,null],[13,"Generic","fe_parser::ast","",7,null],[12,"base","fe_parser::ast::TypeDesc","",11,null],[12,"args","","",11,null],[4,"GenericArg","fe_parser::ast","",null,null],[13,"TypeDesc","","",12,null],[13,"Int","","",12,null],[3,"SimpleImportName","","",null,null],[12,"path","","",13,null],[12,"alias","","",13,null],[4,"FromImportPath","","",null,null],[13,"Absolute","","",14,null],[12,"path","fe_parser::ast::FromImportPath","",15,null],[13,"Relative","fe_parser::ast","",14,null],[12,"parent_level","fe_parser::ast::FromImportPath","",16,null],[12,"path","","",16,null],[4,"FromImportNames","fe_parser::ast","",null,null],[13,"Star","","",17,null],[13,"List","","",17,null],[3,"FromImportName","","",null,null],[12,"name","","",18,null],[12,"alias","","",18,null],[3,"Field","","struct or contract field, with optional \'pub\' and \'const\' …",null,null],[12,"is_pub","","",19,null],[12,"is_const","","",19,null],[12,"name","","",19,null],[12,"typ","","",19,null],[12,"value","","",19,null],[4,"ContractStmt","","",null,null],[13,"EventDef","","",20,null],[12,"name","fe_parser::ast::ContractStmt","",21,null],[12,"fields","","",21,null],[13,"FuncDef","fe_parser::ast","",20,null],[12,"is_pub","fe_parser::ast::ContractStmt","",22,null],[12,"name","","",22,null],[12,"args","","",22,null],[12,"return_type","","",22,null],[12,"body","","",22,null],[3,"EventField","fe_parser::ast","",null,null],[12,"is_idx","","",23,null],[12,"name","","",23,null],[12,"typ","","",23,null],[3,"FuncDefArg","","",null,null],[12,"name","","",24,null],[12,"typ","","",24,null],[4,"FuncStmt","","",null,null],[13,"Return","","",25,null],[12,"value","fe_parser::ast::FuncStmt","",26,null],[13,"VarDecl","fe_parser::ast","",25,null],[12,"target","fe_parser::ast::FuncStmt","",27,null],[12,"typ","","",27,null],[12,"value","","",27,null],[13,"Assign","fe_parser::ast","",25,null],[12,"target","fe_parser::ast::FuncStmt","",28,null],[12,"value","","",28,null],[13,"AugAssign","fe_parser::ast","",25,null],[12,"target","fe_parser::ast::FuncStmt","",29,null],[12,"op","","",29,null],[12,"value","","",29,null],[13,"For","fe_parser::ast","",25,null],[12,"target","fe_parser::ast::FuncStmt","",30,null],[12,"iter","","",30,null],[12,"body","","",30,null],[13,"While","fe_parser::ast","",25,null],[12,"test","fe_parser::ast::FuncStmt","",31,null],[12,"body","","",31,null],[13,"If","fe_parser::ast","",25,null],[12,"test","fe_parser::ast::FuncStmt","",32,null],[12,"body","","",32,null],[12,"or_else","","",32,null],[13,"Assert","fe_parser::ast","",25,null],[12,"test","fe_parser::ast::FuncStmt","",33,null],[12,"msg","","",33,null],[13,"Emit","fe_parser::ast","",25,null],[12,"name","fe_parser::ast::FuncStmt","",34,null],[12,"args","","",34,null],[13,"Expr","fe_parser::ast","",25,null],[12,"value","fe_parser::ast::FuncStmt","",35,null],[13,"Pass","fe_parser::ast","",25,null],[13,"Break","","",25,null],[13,"Continue","","",25,null],[13,"Revert","","",25,null],[4,"VarDeclTarget","","",null,null],[13,"Name","","",36,null],[13,"Tuple","","",36,null],[4,"Expr","","",null,null],[13,"Ternary","","",37,null],[12,"if_expr","fe_parser::ast::Expr","",38,null],[12,"test","","",38,null],[12,"else_expr","","",38,null],[13,"BoolOperation","fe_parser::ast","",37,null],[12,"left","fe_parser::ast::Expr","",39,null],[12,"op","","",39,null],[12,"right","","",39,null],[13,"BinOperation","fe_parser::ast","",37,null],[12,"left","fe_parser::ast::Expr","",40,null],[12,"op","","",40,null],[12,"right","","",40,null],[13,"UnaryOperation","fe_parser::ast","",37,null],[12,"op","fe_parser::ast::Expr","",41,null],[12,"operand","","",41,null],[13,"CompOperation","fe_parser::ast","",37,null],[12,"left","fe_parser::ast::Expr","",42,null],[12,"op","","",42,null],[12,"right","","",42,null],[13,"Attribute","fe_parser::ast","",37,null],[12,"value","fe_parser::ast::Expr","",43,null],[12,"attr","","",43,null],[13,"Subscript","fe_parser::ast","",37,null],[12,"value","fe_parser::ast::Expr","",44,null],[12,"index","","",44,null],[13,"Call","fe_parser::ast","",37,null],[12,"func","fe_parser::ast::Expr","",45,null],[12,"args","","",45,null],[13,"List","fe_parser::ast","",37,null],[12,"elts","fe_parser::ast::Expr","",46,null],[13,"Tuple","fe_parser::ast","",37,null],[12,"elts","fe_parser::ast::Expr","",47,null],[13,"Bool","fe_parser::ast","",37,null],[13,"Name","","",37,null],[13,"Num","","",37,null],[13,"Str","","",37,null],[13,"Unit","","",37,null],[4,"CallArg","","",null,null],[13,"Arg","","",48,null],[13,"Kwarg","","",48,null],[3,"Kwarg","","",null,null],[12,"name","","",49,null],[12,"value","","",49,null],[4,"BoolOperator","","",null,null],[13,"And","","",50,null],[13,"Or","","",50,null],[4,"BinOperator","","",null,null],[13,"Add","","",51,null],[13,"Sub","","",51,null],[13,"Mult","","",51,null],[13,"Div","","",51,null],[13,"Mod","","",51,null],[13,"Pow","","",51,null],[13,"LShift","","",51,null],[13,"RShift","","",51,null],[13,"BitOr","","",51,null],[13,"BitXor","","",51,null],[13,"BitAnd","","",51,null],[4,"UnaryOperator","","",null,null],[13,"Invert","","",52,null],[13,"Not","","",52,null],[13,"UAdd","","",52,null],[13,"USub","","",52,null],[4,"CompOperator","","",null,null],[13,"Eq","","",53,null],[13,"NotEq","","",53,null],[13,"Lt","","",53,null],[13,"LtE","","",53,null],[13,"Gt","","",53,null],[13,"GtE","","",53,null],[0,"grammar","fe_parser","",null,null],[0,"contracts","fe_parser::grammar","",null,null],[5,"parse_contract_def","fe_parser::grammar::contracts","Parse a contract definition.",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[0,"expressions","fe_parser::grammar","",null,null],[5,"parse_expr","fe_parser::grammar::expressions","Parse an expression, starting with the next token.",null,[[["parser",3]],[["node",3],["parseresult",6]]]],[5,"parse_expr_with_min_bp","","Parse an expression, stopping if/when we reach an …",null,[[["parser",3],["u8",15]],[["node",3],["parseresult",6]]]],[5,"parse_call_args","","Parse call arguments",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[0,"functions","fe_parser::grammar","",null,null],[5,"parse_fn_def","fe_parser::grammar::functions","Parse a function definition. The optional <code>pub</code> qualifier …",null,[[["parser",3],["option",4],["span",3]],[["node",3],["parseresult",6]]]],[5,"parse_single_word_stmt","","Parse a <code>continue</code>, <code>break</code>, <code>pass</code>, or <code>revert</code> statement.",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[5,"parse_stmt","","Parse a function-level statement.",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[5,"parse_if_stmt","","Parse an <code>if</code> statement, or an <code>elif</code> block.",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[5,"parse_while_stmt","","Parse a <code>while</code> statement.",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[5,"parse_for_stmt","","Parse a <code>for</code> statement.",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[5,"parse_return_stmt","","Parse a <code>return</code> statement.",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[5,"parse_assert_stmt","","Parse an <code>assert</code> statement.",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[5,"parse_emit_statement","","Parse an <code>emit</code> statement",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[0,"module","fe_parser::grammar","",null,null],[5,"parse_module","fe_parser::grammar::module","Parse a [<code>Module</code>].",null,[[["parser",3]],[["node",3],["parseresult",6]]]],[5,"parse_module_stmt","","Parse a [<code>ModuleStmt</code>].",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[5,"parse_simple_import","","Parse an <code>import</code> statement. This does not yet support …",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[5,"parse_from_import","","Parse a <code>from x import y</code> style import statement.",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[0,"types","fe_parser::grammar","",null,null],[5,"parse_struct_def","fe_parser::grammar::types","Parse a [<code>ModuleStmt::StructDef</code>].",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[5,"parse_type_def","","Parse a type definition, e.g. …",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[5,"parse_event_def","","Parse an event definition.",null,[[["parser",3]],[["node",3],["parseresult",6]]]],[5,"parse_event_field","","Parse an event field, e.g. <code>foo: u8</code> or <code>idx from: address</code>.",null,[[["parser",3]],[["parseresult",6],["node",3]]]],[5,"parse_field","","Parse a field for a struct or contract. The leading …",null,[[["option",4],["parser",3],["span",3]],[["parseresult",6],["node",3]]]],[5,"parse_opt_qualifier","","Parse an optional qualifier (<code>pub</code>, <code>const</code>, or <code>idx</code>).",null,[[["tokenkind",4],["parser",3]],[["option",4],["span",3]]]],[5,"parse_type_desc","","Parse a type description, e.g. <code>u8</code> or <code>map<address, u256></code>.",null,[[["parser",3]],[["node",3],["parseresult",6]]]],[0,"lexer","fe_parser","",null,null],[3,"Token","fe_parser::lexer","",null,null],[12,"kind","","",54,null],[12,"text","","",54,null],[12,"span","","",54,null],[4,"TokenKind","","",null,null],[13,"Error","","",55,null],[13,"Newline","","",55,null],[13,"Indent","","Virtual tokens emitted by the parser",55,null],[13,"Dedent","","",55,null],[13,"Name","","",55,null],[13,"Int","","",55,null],[13,"Hex","","",55,null],[13,"Octal","","",55,null],[13,"Binary","","",55,null],[13,"Text","","",55,null],[13,"True","","",55,null],[13,"False","","",55,null],[13,"Assert","","",55,null],[13,"Break","","",55,null],[13,"Continue","","",55,null],[13,"Contract","","",55,null],[13,"Def","","",55,null],[13,"Const","","",55,null],[13,"Elif","","",55,null],[13,"Else","","",55,null],[13,"Emit","","",55,null],[13,"Event","","",55,null],[13,"Idx","","",55,null],[13,"If","","",55,null],[13,"Import","","",55,null],[13,"Pass","","",55,null],[13,"For","","",55,null],[13,"Pub","","",55,null],[13,"Return","","",55,null],[13,"Revert","","",55,null],[13,"Struct","","",55,null],[13,"Type","","",55,null],[13,"While","","",55,null],[13,"And","","",55,null],[13,"As","","",55,null],[13,"In","","",55,null],[13,"Not","","",55,null],[13,"Or","","",55,null],[13,"ParenOpen","","",55,null],[13,"ParenClose","","",55,null],[13,"BracketOpen","","",55,null],[13,"BracketClose","","",55,null],[13,"BraceOpen","","",55,null],[13,"BraceClose","","",55,null],[13,"Colon","","",55,null],[13,"ColonColon","","",55,null],[13,"Comma","","",55,null],[13,"Semi","","",55,null],[13,"Plus","","",55,null],[13,"Minus","","",55,null],[13,"Star","","",55,null],[13,"Slash","","",55,null],[13,"Pipe","","",55,null],[13,"Amper","","",55,null],[13,"Lt","","",55,null],[13,"LtLt","","",55,null],[13,"Gt","","",55,null],[13,"GtGt","","",55,null],[13,"Eq","","",55,null],[13,"Dot","","",55,null],[13,"Percent","","",55,null],[13,"EqEq","","",55,null],[13,"NotEq","","",55,null],[13,"LtEq","","",55,null],[13,"GtEq","","",55,null],[13,"Tilde","","",55,null],[13,"Hat","","",55,null],[13,"StarStar","","",55,null],[13,"StarStarEq","","",55,null],[13,"PlusEq","","",55,null],[13,"MinusEq","","",55,null],[13,"StarEq","","",55,null],[13,"SlashEq","","",55,null],[13,"PercentEq","","",55,null],[13,"AmperEq","","",55,null],[13,"PipeEq","","",55,null],[13,"HatEq","","",55,null],[13,"LtLtEq","","",55,null],[13,"GtGtEq","","",55,null],[13,"Arrow","","",55,null],[3,"Lexer","","",null,null],[11,"new","","Create a new lexer with the given source code string.",56,[[["str",15]],["lexer",3]]],[11,"source","","Return the full source code string that\'s being tokenized.",56,[[],["str",15]]],[0,"node","fe_parser","",null,null],[3,"Span","fe_parser::node","An exclusive span of byte offsets in a source file.",null,null],[12,"start","","A byte offset specifying the inclusive start of a span.",57,null],[12,"end","","A byte offset specifying the exclusive end of a span.",57,null],[3,"NodeId","","",null,null],[11,"create","","",58,[[]]],[3,"Node","","",null,null],[12,"kind","","",59,null],[12,"id","","",59,null],[12,"span","","",59,null],[11,"new","","",59,[[["span",3]]]],[11,"new_id","","Sets a new node ID.",59,[[]]],[3,"Token","fe_parser","",null,null],[12,"kind","","",54,null],[12,"text","","",54,null],[12,"span","","",54,null],[4,"TokenKind","","",null,null],[13,"Error","","",55,null],[13,"Newline","","",55,null],[13,"Indent","","Virtual tokens emitted by the parser",55,null],[13,"Dedent","","",55,null],[13,"Name","","",55,null],[13,"Int","","",55,null],[13,"Hex","","",55,null],[13,"Octal","","",55,null],[13,"Binary","","",55,null],[13,"Text","","",55,null],[13,"True","","",55,null],[13,"False","","",55,null],[13,"Assert","","",55,null],[13,"Break","","",55,null],[13,"Continue","","",55,null],[13,"Contract","","",55,null],[13,"Def","","",55,null],[13,"Const","","",55,null],[13,"Elif","","",55,null],[13,"Else","","",55,null],[13,"Emit","","",55,null],[13,"Event","","",55,null],[13,"Idx","","",55,null],[13,"If","","",55,null],[13,"Import","","",55,null],[13,"Pass","","",55,null],[13,"For","","",55,null],[13,"Pub","","",55,null],[13,"Return","","",55,null],[13,"Revert","","",55,null],[13,"Struct","","",55,null],[13,"Type","","",55,null],[13,"While","","",55,null],[13,"And","","",55,null],[13,"As","","",55,null],[13,"In","","",55,null],[13,"Not","","",55,null],[13,"Or","","",55,null],[13,"ParenOpen","","",55,null],[13,"ParenClose","","",55,null],[13,"BracketOpen","","",55,null],[13,"BracketClose","","",55,null],[13,"BraceOpen","","",55,null],[13,"BraceClose","","",55,null],[13,"Colon","","",55,null],[13,"ColonColon","","",55,null],[13,"Comma","","",55,null],[13,"Semi","","",55,null],[13,"Plus","","",55,null],[13,"Minus","","",55,null],[13,"Star","","",55,null],[13,"Slash","","",55,null],[13,"Pipe","","",55,null],[13,"Amper","","",55,null],[13,"Lt","","",55,null],[13,"LtLt","","",55,null],[13,"Gt","","",55,null],[13,"GtGt","","",55,null],[13,"Eq","","",55,null],[13,"Dot","","",55,null],[13,"Percent","","",55,null],[13,"EqEq","","",55,null],[13,"NotEq","","",55,null],[13,"LtEq","","",55,null],[13,"GtEq","","",55,null],[13,"Tilde","","",55,null],[13,"Hat","","",55,null],[13,"StarStar","","",55,null],[13,"StarStarEq","","",55,null],[13,"PlusEq","","",55,null],[13,"MinusEq","","",55,null],[13,"StarEq","","",55,null],[13,"SlashEq","","",55,null],[13,"PercentEq","","",55,null],[13,"AmperEq","","",55,null],[13,"PipeEq","","",55,null],[13,"HatEq","","",55,null],[13,"LtLtEq","","",55,null],[13,"GtGtEq","","",55,null],[13,"Arrow","","",55,null],[3,"Label","","",null,null],[3,"ParseFailed","","",null,null],[6,"ParseResult","","",null,null],[3,"Parser","","<code>Parser</code> maintains the parsing state, such as the token …",null,null],[12,"diagnostics","","The diagnostics (errors and warnings) emitted during …",60,null],[5,"parse_file","","Parse a [<code>Module</code>] from the file content string.",null,[[["sourcefileid",3],["str",15]],[["vec",3],["result",4]]]],[5,"parse_code_chunk","","Apply the given parsing function to the code string, …",null,[[["str",15]],["parseresult",6]]],[11,"from","fe_parser::ast","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","fe_parser::lexer","",54,[[]]],[11,"into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"into_iter","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","fe_parser","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_string","","",61,[[],["string",3]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","fe_parser::node","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"fmt","","",57,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",57,[[]]],[11,"deserialize","","",57,[[],[["span",3],["result",4]]]],[11,"add","","",57,[[["span",3]],["span",3]]],[11,"add","","",57,[[["option",4],["span",3]],["span",3]]],[11,"add","","",57,[[["option",4]],["span",3]]],[11,"serialize","","",57,[[],["result",4]]],[11,"clone","","",57,[[],["span",3]]],[11,"add_assign","","",57,[[]]],[11,"eq","","",57,[[["span",3]],["bool",15]]],[11,"ne","","",57,[[["span",3]],["bool",15]]],[11,"from","","",59,[[["token",3]],[["string",3],["node",3]]]],[11,"from","","",57,[[["node",3]]]],[11,"from","","",57,[[["box",3]]]],[11,"from","","",58,[[["node",3]]]],[11,"from","","",58,[[["box",3]]]],[11,"next","fe_parser::lexer","",56,[[],["option",4]]],[11,"clone","fe_parser::ast","",0,[[],["module",3]]],[11,"clone","","",1,[[],["modulestmt",4]]],[11,"clone","","",7,[[],["typedesc",4]]],[11,"clone","","",12,[[],["genericarg",4]]],[11,"clone","","",13,[[],["simpleimportname",3]]],[11,"clone","","",14,[[],["fromimportpath",4]]],[11,"clone","","",17,[[],["fromimportnames",4]]],[11,"clone","","",18,[[],["fromimportname",3]]],[11,"clone","","",19,[[],["field",3]]],[11,"clone","","",20,[[],["contractstmt",4]]],[11,"clone","","",23,[[],["eventfield",3]]],[11,"clone","","",24,[[],["funcdefarg",3]]],[11,"clone","","",25,[[],["funcstmt",4]]],[11,"clone","","",36,[[],["vardecltarget",4]]],[11,"clone","","",37,[[],["expr",4]]],[11,"clone","","",48,[[],["callarg",4]]],[11,"clone","","",49,[[],["kwarg",3]]],[11,"clone","","",50,[[],["booloperator",4]]],[11,"clone","","",51,[[],["binoperator",4]]],[11,"clone","","",52,[[],["unaryoperator",4]]],[11,"clone","","",53,[[],["compoperator",4]]],[11,"clone","fe_parser::lexer","",55,[[],["tokenkind",4]]],[11,"clone","fe_parser::node","",58,[[],["nodeid",3]]],[11,"clone","","",59,[[],["node",3]]],[11,"default","","",58,[[],["nodeid",3]]],[11,"cmp","","",58,[[["nodeid",3]],["ordering",4]]],[11,"eq","fe_parser::ast","",0,[[["module",3]],["bool",15]]],[11,"ne","","",0,[[["module",3]],["bool",15]]],[11,"eq","","",1,[[["modulestmt",4]],["bool",15]]],[11,"ne","","",1,[[["modulestmt",4]],["bool",15]]],[11,"eq","","",7,[[["typedesc",4]],["bool",15]]],[11,"ne","","",7,[[["typedesc",4]],["bool",15]]],[11,"eq","","",12,[[["genericarg",4]],["bool",15]]],[11,"ne","","",12,[[["genericarg",4]],["bool",15]]],[11,"eq","","",13,[[["simpleimportname",3]],["bool",15]]],[11,"ne","","",13,[[["simpleimportname",3]],["bool",15]]],[11,"eq","","",14,[[["fromimportpath",4]],["bool",15]]],[11,"ne","","",14,[[["fromimportpath",4]],["bool",15]]],[11,"eq","","",17,[[["fromimportnames",4]],["bool",15]]],[11,"ne","","",17,[[["fromimportnames",4]],["bool",15]]],[11,"eq","","",18,[[["fromimportname",3]],["bool",15]]],[11,"ne","","",18,[[["fromimportname",3]],["bool",15]]],[11,"eq","","",19,[[["field",3]],["bool",15]]],[11,"ne","","",19,[[["field",3]],["bool",15]]],[11,"eq","","",20,[[["contractstmt",4]],["bool",15]]],[11,"ne","","",20,[[["contractstmt",4]],["bool",15]]],[11,"eq","","",23,[[["eventfield",3]],["bool",15]]],[11,"ne","","",23,[[["eventfield",3]],["bool",15]]],[11,"eq","","",24,[[["funcdefarg",3]],["bool",15]]],[11,"ne","","",24,[[["funcdefarg",3]],["bool",15]]],[11,"eq","","",25,[[["funcstmt",4]],["bool",15]]],[11,"ne","","",25,[[["funcstmt",4]],["bool",15]]],[11,"eq","","",36,[[["vardecltarget",4]],["bool",15]]],[11,"ne","","",36,[[["vardecltarget",4]],["bool",15]]],[11,"eq","","",37,[[["expr",4]],["bool",15]]],[11,"ne","","",37,[[["expr",4]],["bool",15]]],[11,"eq","","",48,[[["callarg",4]],["bool",15]]],[11,"ne","","",48,[[["callarg",4]],["bool",15]]],[11,"eq","","",49,[[["kwarg",3]],["bool",15]]],[11,"ne","","",49,[[["kwarg",3]],["bool",15]]],[11,"eq","","",50,[[["booloperator",4]],["bool",15]]],[11,"eq","","",51,[[["binoperator",4]],["bool",15]]],[11,"eq","","",52,[[["unaryoperator",4]],["bool",15]]],[11,"eq","","",53,[[["compoperator",4]],["bool",15]]],[11,"eq","fe_parser::lexer","",54,[[["token",3]],["bool",15]]],[11,"ne","","",54,[[["token",3]],["bool",15]]],[11,"eq","","",55,[[["tokenkind",4]],["bool",15]]],[11,"eq","fe_parser::node","",58,[[["nodeid",3]],["bool",15]]],[11,"ne","","",58,[[["nodeid",3]],["bool",15]]],[11,"eq","","",59,[[["node",3]],["bool",15]]],[11,"ne","","",59,[[["node",3]],["bool",15]]],[11,"partial_cmp","","",58,[[["nodeid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",58,[[["nodeid",3]],["bool",15]]],[11,"le","","",58,[[["nodeid",3]],["bool",15]]],[11,"gt","","",58,[[["nodeid",3]],["bool",15]]],[11,"ge","","",58,[[["nodeid",3]],["bool",15]]],[11,"fmt","fe_parser::ast","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","fe_parser::lexer","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","fe_parser","",61,[[["formatter",3]],["result",6]]],[11,"fmt","fe_parser::node","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","fe_parser","",61,[[["formatter",3]],[["error",3],["result",4]]]],[11,"add","fe_parser::node","",57,[[["token",3]]]],[11,"add","","",57,[[["node",3]]]],[11,"hash","","",58,[[]]],[11,"serialize","fe_parser::ast","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",17,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","","",23,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",36,[[],["result",4]]],[11,"serialize","","",37,[[],["result",4]]],[11,"serialize","","",48,[[],["result",4]]],[11,"serialize","","",49,[[],["result",4]]],[11,"serialize","","",50,[[],["result",4]]],[11,"serialize","","",51,[[],["result",4]]],[11,"serialize","","",52,[[],["result",4]]],[11,"serialize","","",53,[[],["result",4]]],[11,"serialize","fe_parser::node","",59,[[],["result",4]]],[11,"deserialize","fe_parser::ast","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","","",17,[[],["result",4]]],[11,"deserialize","","",18,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","","",23,[[],["result",4]]],[11,"deserialize","","",24,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","","",36,[[],["result",4]]],[11,"deserialize","","",37,[[],["result",4]]],[11,"deserialize","","",48,[[],["result",4]]],[11,"deserialize","","",49,[[],["result",4]]],[11,"deserialize","","",50,[[],["result",4]]],[11,"deserialize","","",51,[[],["result",4]]],[11,"deserialize","","",52,[[],["result",4]]],[11,"deserialize","","",53,[[],["result",4]]],[11,"deserialize","fe_parser::node","",59,[[],["result",4]]],[11,"lex","fe_parser::lexer","",55,[[["lexer",3]]]],[11,"friendly_str","","Return a user-friendly description of the token kind. E.g.…",55,[[],[["str",15],["option",4]]]],[11,"symbol_str","","If the token is a symbol or keyword, return the string …",55,[[],[["str",15],["option",4]]]],[11,"new","fe_parser","Create a new parser for a source code string and …",60,[[["str",15],["sourcefileid",3]]]],[11,"next","","Return the next token, or an error if we\'ve reached the …",60,[[],[["parseresult",6],["token",3]]]],[11,"peek_or_err","","Take a peek at the next token kind without consuming it, …",60,[[],[["tokenkind",4],["parseresult",6]]]],[11,"peek","","Take a peek at the next token kind. Returns <code>None</code> if we\'ve …",60,[[],[["tokenkind",4],["option",4]]]],[11,"peeked_text","","Peek at the text of the next token, without consuming it. …",60,[[],["str",15]]],[11,"split_next","","Split the next token into two tokens, returning the …",60,[[],[["parseresult",6],["token",3]]]],[11,"done","","Returns <code>true</code> if the parser has reached the end of the …",60,[[],["bool",15]]],[11,"last_indent","","The leading whitespace string of the last-seen indented …",60,[[],["str",15]]],[11,"assert","","Assert that the next token kind it matches the expected …",60,[[["tokenkind",4]],["token",3]]],[11,"expect","","If the next token matches the expected kind, return it. …",60,[[["tokenkind",4],["into",8],["string",3]],[["parseresult",6],["token",3]]]],[11,"expect_with_notes","","Like [<code>Parser::expect</code>], but with additional notes to be …",60,[[["tokenkind",4]],[["parseresult",6],["token",3]]]],[11,"unexpected_token_error","","Emit an \\\"unexpected token\\\" error diagnostic with the …",60,[[["string",3],["into",8],["vec",3],["span",3]]]],[11,"enter_block","","Enter an indented block, which is expected to be …",60,[[["str",15],["span",3]],["parseresult",6]]],[11,"expect_newline","","Expect and consume one or more newlines, without …",60,[[["str",15]],["parseresult",6]]],[11,"error","","Emit an error diagnostic, but don\'t stop parsing",60,[[["into",8],["string",3],["span",3]]]],[11,"fancy_error","","Emit a \\\"fancy\\\" error diagnostic with any number of labels …",60,[[["string",3],["label",3],["vec",3],["into",8],["vec",3]]]],[11,"primary","","Create a primary label with the given message. This will …",62,[[["string",3],["span",3]]]],[11,"secondary","","Create a secondary label with the given message. This …",62,[[["string",3],["span",3]]]],[11,"new","fe_parser::node","",57,[[["usize",15]],["span",3]]],[11,"zero","","",57,[[],["span",3]]],[11,"from_pair","","",57,[[],["span",3]]]],"p":[[3,"Module"],[4,"ModuleStmt"],[13,"TypeDef"],[13,"SimpleImport"],[13,"FromImport"],[13,"ContractDef"],[13,"StructDef"],[4,"TypeDesc"],[13,"Base"],[13,"Array"],[13,"Tuple"],[13,"Generic"],[4,"GenericArg"],[3,"SimpleImportName"],[4,"FromImportPath"],[13,"Absolute"],[13,"Relative"],[4,"FromImportNames"],[3,"FromImportName"],[3,"Field"],[4,"ContractStmt"],[13,"EventDef"],[13,"FuncDef"],[3,"EventField"],[3,"FuncDefArg"],[4,"FuncStmt"],[13,"Return"],[13,"VarDecl"],[13,"Assign"],[13,"AugAssign"],[13,"For"],[13,"While"],[13,"If"],[13,"Assert"],[13,"Emit"],[13,"Expr"],[4,"VarDeclTarget"],[4,"Expr"],[13,"Ternary"],[13,"BoolOperation"],[13,"BinOperation"],[13,"UnaryOperation"],[13,"CompOperation"],[13,"Attribute"],[13,"Subscript"],[13,"Call"],[13,"List"],[13,"Tuple"],[4,"CallArg"],[3,"Kwarg"],[4,"BoolOperator"],[4,"BinOperator"],[4,"UnaryOperator"],[4,"CompOperator"],[3,"Token"],[4,"TokenKind"],[3,"Lexer"],[3,"Span"],[3,"NodeId"],[3,"Node"],[3,"Parser"],[3,"ParseFailed"],[3,"Label"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);